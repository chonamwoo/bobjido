import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence, PanInfo } from 'framer-motion';
import { 
  HeartIcon,
  XMarkIcon,
  SparklesIcon,
  MapPinIcon,
  ChatBubbleLeftIcon,
  AdjustmentsHorizontalIcon,
  GlobeAltIcon,
  MapIcon,
  CalendarIcon,
  UserGroupIcon,
  BuildingOfficeIcon,
  HomeIcon,
  FireIcon,
  TrophyIcon,
  MagnifyingGlassIcon
} from '@heroicons/react/24/outline';
import axios from '../utils/axios';
import toast from 'react-hot-toast';
import { useNavigate, useLocation } from 'react-router-dom';
import KoreaMap from '../components/KoreaMap';
import WorldMap from '../components/WorldMap';

// ÏùåÏãù Í¥ÄÎ†® Ïª§Ïä§ÌÖÄ ÏïÑÏù¥ÏΩò
const PlateIcon: React.FC<{ className?: string }> = ({ className = "w-7 h-7" }) => (
  <svg className={className} fill="currentColor" viewBox="0 0 24 24">
    <circle cx="12" cy="12" r="9" stroke="currentColor" strokeWidth={1.5} fill="none" />
    <circle cx="12" cy="12" r="3" fill="currentColor" />
  </svg>
);

const BowlIcon: React.FC<{ className?: string }> = ({ className = "w-7 h-7" }) => (
  <svg className={className} fill="currentColor" viewBox="0 0 24 24">
    <path d="M4 12c0 4.4 3.6 8 8 8s8-3.6 8-8c0-1.1-.9-2-2-2H6c-1.1 0-2 .9-2 2z" stroke="currentColor" strokeWidth={1.5} />
    <path d="M7 10c.6-.6 1.4-1 2.2-1h5.6c.8 0 1.6.4 2.2 1" stroke="currentColor" strokeWidth={1.5} fill="none" />
  </svg>
);

// Íµ≠Í∞ÄÎ≥Ñ Íµ≠Í∏∞ Ïù¥Î™®ÏßÄ Îß§Ìïë
const countryFlags: { [key: string]: string } = {
  'Japan': 'üáØüáµ',
  'Korea': 'üá∞üá∑',
  'USA': 'üá∫üá∏',
  'France': 'üá´üá∑',
  'UK': 'üá¨üáß',
  'Italy': 'üáÆüáπ',
  'Spain': 'üá™üá∏',
  'China': 'üá®üá≥',
  'Thailand': 'üáπüá≠',
  'Singapore': 'üá∏üá¨',
  'Australia': 'üá¶üá∫',
  'Germany': 'üá©üá™',
  'Canada': 'üá®üá¶',
  'Brazil': 'üáßüá∑',
  'India': 'üáÆüá≥',
  'Mexico': 'üá≤üáΩ',
  'UAE': 'üá¶üá™',
  'Vietnam': 'üáªüá≥',
  'Indonesia': 'üáÆüá©',
  'Turkey': 'üáπüá∑',
  'Netherlands': 'üá≥üá±',
  'Belgium': 'üáßüá™',
  'Switzerland': 'üá®üá≠',
  'Sweden': 'üá∏üá™',
  'Norway': 'üá≥üá¥',
  'Portugal': 'üáµüáπ',
  'Greece': 'üá¨üá∑',
  'Egypt': 'üá™üá¨',
  'Morocco': 'üá≤üá¶'
};

// ÌïúÍµ≠ ÎèÑÏãú Îç∞Ïù¥ÌÑ∞
const koreanCities = [
  { name: 'ÏÑúÏö∏', region: 'ÏàòÎèÑÍ∂å', icon: 'üèõÔ∏è', users: 234, restaurants: 567 },
  { name: 'Î∂ÄÏÇ∞', region: 'ÏòÅÎÇ®', icon: 'üåä', users: 89, restaurants: 234 },
  { name: 'Ï†úÏ£º', region: 'Ï†úÏ£º', icon: 'üèùÔ∏è', users: 67, restaurants: 189 },
  { name: 'Í∞ïÎ¶â', region: 'Í∞ïÏõê', icon: '‚õ∑Ô∏è', users: 45, restaurants: 123 },
  { name: 'Í≤ΩÏ£º', region: 'ÏòÅÎÇ®', icon: 'üèõÔ∏è', users: 34, restaurants: 98 },
  { name: 'Ï†ÑÏ£º', region: 'Ìò∏ÎÇ®', icon: 'üçú', users: 56, restaurants: 145 },
  { name: 'ÎåÄÍµ¨', region: 'ÏòÅÎÇ®', icon: 'üåÜ', users: 78, restaurants: 201 },
  { name: 'Ïù∏Ï≤ú', region: 'ÏàòÎèÑÍ∂å', icon: '‚úàÔ∏è', users: 92, restaurants: 223 },
  { name: 'Í¥ëÏ£º', region: 'Ìò∏ÎÇ®', icon: 'üé®', users: 43, restaurants: 112 },
  { name: 'ÎåÄÏ†Ñ', region: 'Ï∂©Ï≤≠', icon: 'üî¨', users: 51, restaurants: 134 },
  { name: 'Ïö∏ÏÇ∞', region: 'ÏòÅÎÇ®', icon: 'üè≠', users: 38, restaurants: 97 },
  { name: 'ÏàòÏõê', region: 'ÏàòÎèÑÍ∂å', icon: 'üè∞', users: 73, restaurants: 187 }
];

// Ìï¥Ïô∏ Ïù∏Í∏∞ ÎèÑÏãú Îç∞Ïù¥ÌÑ∞
const globalDestinations = [
  // ÏïÑÏãúÏïÑ
  { name: 'ÎèÑÏøÑ', country: 'Japan', flag: 'üáØüáµ', continent: 'asia', hot: true, users: 156, restaurants: 342 },
  { name: 'Ïò§ÏÇ¨Ïπ¥', country: 'Japan', flag: 'üáØüáµ', continent: 'asia', users: 89, restaurants: 198 },
  { name: 'Î∞©ÏΩï', country: 'Thailand', flag: 'üáπüá≠', continent: 'asia', hot: true, users: 92, restaurants: 256 },
  { name: 'Ïã±Í∞ÄÌè¨Î•¥', country: 'Singapore', flag: 'üá∏üá¨', continent: 'asia', users: 78, restaurants: 189 },
  { name: 'ÌôçÏΩ©', country: 'China', flag: 'üá≠üá∞', continent: 'asia', users: 65, restaurants: 178 },
  { name: 'ÌÉÄÏù¥Î≤†Ïù¥', country: 'Taiwan', flag: 'üáπüáº', continent: 'asia', users: 43, restaurants: 134 },
  { name: 'ÌïòÎÖ∏Ïù¥', country: 'Vietnam', flag: 'üáªüá≥', continent: 'asia', users: 38, restaurants: 98 },
  { name: 'Î∞úÎ¶¨', country: 'Indonesia', flag: 'üáÆüá©', continent: 'asia', hot: true, users: 87, restaurants: 167 },
  
  // Ïú†ÎüΩ
  { name: 'ÌååÎ¶¨', country: 'France', flag: 'üá´üá∑', continent: 'europe', hot: true, users: 134, restaurants: 298 },
  { name: 'Îü∞Îçò', country: 'UK', flag: 'üá¨üáß', continent: 'europe', users: 112, restaurants: 267 },
  { name: 'Î∞îÎ•¥ÏÖÄÎ°úÎÇò', country: 'Spain', flag: 'üá™üá∏', continent: 'europe', hot: true, users: 98, restaurants: 234 },
  { name: 'Î°úÎßà', country: 'Italy', flag: 'üáÆüáπ', continent: 'europe', users: 89, restaurants: 212 },
  { name: 'Î≤†Î•ºÎ¶∞', country: 'Germany', flag: 'üá©üá™', continent: 'europe', users: 67, restaurants: 156 },
  { name: 'ÏïîÏä§ÌÖåÎ•¥Îã¥', country: 'Netherlands', flag: 'üá≥üá±', continent: 'europe', users: 54, restaurants: 134 },
  { name: 'ÌîÑÎùºÌïò', country: 'Czech', flag: 'üá®üáø', continent: 'europe', users: 45, restaurants: 112 },
  { name: 'Î¶¨Ïä§Î≥∏', country: 'Portugal', flag: 'üáµüáπ', continent: 'europe', hot: true, users: 72, restaurants: 145 },
  
  // ÏïÑÎ©îÎ¶¨Ïπ¥
  { name: 'Îâ¥Ïöï', country: 'USA', flag: 'üá∫üá∏', continent: 'americas', hot: true, users: 189, restaurants: 456 },
  { name: 'LA', country: 'USA', flag: 'üá∫üá∏', continent: 'americas', users: 145, restaurants: 367 },
  { name: 'ÏÉåÌîÑÎûÄÏãúÏä§ÏΩî', country: 'USA', flag: 'üá∫üá∏', continent: 'americas', users: 98, restaurants: 234 },
  { name: 'ÌÜ†Î°†ÌÜ†', country: 'Canada', flag: 'üá®üá¶', continent: 'americas', users: 67, restaurants: 178 },
  { name: 'Î©ïÏãúÏΩîÏãúÌã∞', country: 'Mexico', flag: 'üá≤üáΩ', continent: 'americas', users: 54, restaurants: 143 },
  
  // Ïò§ÏÑ∏ÏïÑÎãàÏïÑ
  { name: 'ÏãúÎìúÎãà', country: 'Australia', flag: 'üá¶üá∫', continent: 'oceania', users: 78, restaurants: 198 },
  { name: 'Î©úÎ≤ÑÎ•∏', country: 'Australia', flag: 'üá¶üá∫', continent: 'oceania', users: 65, restaurants: 167 }
];

interface UserCard {
  id: string;
  username: string;
  profileImage: string;
  distance: number;
  matchRate: number;
  tasteProfile: string;
  tasteTags: string[];
  favoriteRestaurants: {
    name: string;
    category: string;
    image?: string;
  }[];
  bio?: string;
  age?: number;
  location: string;
  country?: string;
  city?: string;
  isLocal?: boolean;
  languages?: string[];
}

// ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ìï®Ïàò
const generateMockUsers = (locationMode: string, selectedLocation?: any): UserCard[] => {
  if (locationMode === 'nearby') {
    return [
      {
        id: '1',
        username: 'ÍπÄÎØ∏Ïãù',
        profileImage: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',
        distance: 2.3,
        matchRate: 92,
        tasteProfile: 'Î™®ÌóòÏ†ÅÏù∏ ÎØ∏ÏãùÍ∞Ä',
        tasteTags: ['Îß§Ïö¥Îßõ ÎßàÏä§ÌÑ∞', 'Ïπ¥Ìéò Ìà¨Ïñ¥', 'ÏÉàÎ°úÏö¥ ÎèÑÏ†Ñ'],
        favoriteRestaurants: [
          { name: 'ÍµêÎåÄÏù¥Ï∏µÏßë', category: 'ÌïúÏãù' },
          { name: 'Ïä§ÏãúÏò§ÎßàÏπ¥ÏÑ∏', category: 'ÏùºÏãù' }
        ],
        bio: 'ÎßõÏûàÎäî ÏùåÏãùÍ≥º Ìï®ÍªòÌïòÎäî ÌñâÎ≥µÌïú ÏùºÏÉÅ üçΩÔ∏è',
        age: 28,
        location: 'Í∞ïÎÇ®Íµ¨',
        country: 'Korea',
        city: 'ÏÑúÏö∏'
      },
      {
        id: '2',
        username: 'Ïù¥Íµ¨Î•¥Î©î',
        profileImage: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face',
        distance: 4.1,
        matchRate: 85,
        tasteProfile: 'Ìä∏Î†åÎîîÌïú Ïπ¥ÌéòÎü¨Î≤Ñ',
        tasteTags: ['ÎîîÏ†ÄÌä∏ ÌôÄÎ¶≠', 'Î∏åÎü∞Ïπò Ïπ¥Ìéò', 'Î∂ÑÏúÑÍ∏∞ ÎßõÏßë'],
        favoriteRestaurants: [
          { name: 'Î∏îÎ£®Î≥¥ÌãÄ', category: 'Ïπ¥Ìéò' },
          { name: 'ÎπåÏ¶à', category: 'Î∏åÎü∞Ïπò' }
        ],
        bio: 'Ïπ¥Ìéò Ìà¨Ïñ¥Í∞Ä Ï∑®ÎØ∏ÏûÖÎãàÎã§ ‚òï',
        age: 25,
        location: 'ÏÑ±ÎèôÍµ¨',
        country: 'Korea',
        city: 'ÏÑúÏö∏'
      }
    ];
  }

  if (locationMode === 'domestic' && selectedLocation) {
    return [
      {
        id: '10',
        username: `${selectedLocation.name}Ìë∏Îîî`,
        profileImage: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=400&h=400&fit=crop&crop=face',
        distance: 0,
        matchRate: 88,
        tasteProfile: `${selectedLocation.name} Î°úÏª¨ Ï†ÑÎ¨∏Í∞Ä`,
        tasteTags: ['ÏßÄÏó≠ ÎßõÏßë', 'Î°úÏª¨ Ï∂îÏ≤ú', 'Ïà®ÏùÄ ÎßõÏßë'],
        favoriteRestaurants: [
          { name: `${selectedLocation.name} ÎßõÏßë 1`, category: 'ÌïúÏãù' },
          { name: `${selectedLocation.name} ÎßõÏßë 2`, category: 'ÏßÄÏó≠ ÌäπÏÇ∞' }
        ],
        bio: `${selectedLocation.name}Ïùò Î™®Îì† ÎßõÏßëÏùÑ ÏïåÍ≥† ÏûàÏñ¥Ïöî! üçΩÔ∏è`,
        age: 30,
        location: selectedLocation.name,
        country: 'Korea',
        city: selectedLocation.name,
        isLocal: true
      }
    ];
  }

  if (locationMode === 'global' && selectedLocation) {
    return [
      {
        id: '20',
        username: `${selectedLocation.name} Foodie`,
        profileImage: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=400&h=400&fit=crop&crop=face',
        distance: 0,
        matchRate: 90,
        tasteProfile: 'Local Expert',
        tasteTags: ['Street Food', 'Fine Dining', 'Local Favorites'],
        favoriteRestaurants: [
          { name: `Best of ${selectedLocation.name}`, category: 'Local' },
          { name: 'Hidden Gem Restaurant', category: 'Traditional' }
        ],
        bio: `Your local guide in ${selectedLocation.name} ${selectedLocation.flag || 'üåç'}`,
        age: 32,
        location: selectedLocation.name,
        country: selectedLocation.country,
        city: selectedLocation.name,
        isLocal: true,
        languages: ['EN', 'Local']
      }
    ];
  }
  
  return [];
};

const ExploreV2: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const locationState = location.state as any;
  
  const [locationMode, setLocationMode] = useState<'nearby' | 'domestic' | 'global'>(
    locationState?.locationMode || 'nearby'
  );
  const [selectedLocation, setSelectedLocation] = useState<any>(null);
  const [showLocationPicker, setShowLocationPicker] = useState(false);
  const [showFilter, setShowFilter] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedContinent, setSelectedContinent] = useState<string>('all');
  
  const [users, setUsers] = useState<UserCard[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [swipeDirection, setSwipeDirection] = useState<'left' | 'right' | null>(null);
  const [filters, setFilters] = useState({
    distance: 10,
    minMatchRate: 70,
    tasteProfile: 'all'
  });

  // ÏúÑÏπò Î™®ÎìúÏóê Îî∞Îùº ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω
  useEffect(() => {
    const newUsers = generateMockUsers(locationMode, selectedLocation);
    setUsers(newUsers);
    setCurrentIndex(0);
  }, [locationMode, selectedLocation]);

  const currentUser = users[currentIndex];
  const hasMoreUsers = currentIndex < users.length;

  const handleSwipe = (direction: 'left' | 'right' | 'up') => {
    if (!currentUser) return;

    setSwipeDirection(direction === 'up' ? 'right' : direction);
    
    if (direction === 'right') {
      handleLike();
    } else if (direction === 'left') {
      handlePass();
    } else if (direction === 'up') {
      handleSuperLike();
    }
  };

  // Ïù¥Ï†Ñ Ïπ¥ÎìúÎ°ú Ïù¥Îèô
  const goToPrevious = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  };

  // Îã§Ïùå Ïπ¥ÎìúÎ°ú Ïù¥Îèô (passÏôÄ ÎèôÏùº)
  const goToNext = () => {
    handlePass();
  };

  const handleLike = async () => {
    if (!currentUser) return;
    
    const message = currentUser.isLocal 
      ? `${currentUser.username}ÎãòÍ≥º ${currentUser.city}ÏóêÏÑú ÎßåÎÇòÏöî! üåè`
      : `${currentUser.username}ÎãòÍ≥º Ìï®Íªò ÏãùÏÇ¨Ìï¥Ïöî! üçΩÔ∏è`;
    
    toast.success(message);
    setTimeout(() => {
      setCurrentIndex(prev => prev + 1);
      setSwipeDirection(null);
    }, 300);
  };

  const handlePass = () => {
    if (!currentUser) return;
    setTimeout(() => {
      setCurrentIndex(prev => prev + 1);
      setSwipeDirection(null);
    }, 300);
  };

  const handleSuperLike = async () => {
    if (!currentUser) return;
    
    toast.success(`${currentUser.username}ÎãòÏóêÍ≤å ÏäàÌçºÎùºÏù¥ÌÅ¨Î•º Î≥¥ÎÉàÏäµÎãàÎã§! ‚≠ê`, {
      icon: '‚≠ê',
      duration: 3000
    });
    
    setTimeout(() => {
      setCurrentIndex(prev => prev + 1);
      setSwipeDirection(null);
    }, 300);
  };

  // Ìï¥Ïô∏ ÎèÑÏãú ÌïÑÌÑ∞ÎßÅ
  const filteredGlobalDestinations = globalDestinations.filter(dest => {
    const matchesContinent = selectedContinent === 'all' || dest.continent === selectedContinent;
    const matchesSearch = dest.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          dest.country.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesContinent && matchesSearch;
  });

  // Íµ≠ÎÇ¥ ÎèÑÏãú ÌïÑÌÑ∞ÎßÅ
  const filteredKoreanCities = koreanCities.filter(city => 
    city.name.includes(searchQuery) || city.region.includes(searchQuery)
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 overflow-x-hidden">
      <div className="max-w-lg mx-auto px-4 py-8 relative">
        {/* Ìó§Îçî */}
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-2xl font-bold flex items-center gap-2">
            ÌïúÎÅºÏñ¥Îïå?
            {locationMode === 'global' && <span className="text-lg">üåè</span>}
            {locationMode === 'domestic' && <span className="text-lg">üá∞üá∑</span>}
          </h1>
          <div className="flex gap-2">
            <button
              onClick={() => setShowLocationPicker(!showLocationPicker)}
              className={`p-2 rounded-lg shadow hover:shadow-md transition-all ${
                locationMode !== 'nearby' ? 'bg-blue-500 text-white' : 'bg-white'
              }`}
            >
              <MapPinIcon className="w-5 h-5" />
            </button>
            <button
              onClick={() => setShowFilter(!showFilter)}
              className="p-2 bg-white rounded-lg shadow hover:shadow-md transition-all"
            >
              <AdjustmentsHorizontalIcon className="w-5 h-5 text-gray-600" />
            </button>
          </div>
        </div>

        {/* ÏúÑÏπò Î™®Îìú ÏÑ†ÌÉù - 3Í∞úÎ°ú Í∞ÑÏÜåÌôî */}
        <div className="bg-white rounded-xl shadow-sm p-2 mb-4">
          <div className="grid grid-cols-3 gap-1">
            <button
              onClick={() => {
                setLocationMode('nearby');
                setSelectedLocation(null);
              }}
              className={`flex flex-col items-center p-3 rounded-lg transition-all ${
                locationMode === 'nearby' 
                  ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white' 
                  : 'hover:bg-gray-50'
              }`}
            >
              <MapPinIcon className="w-5 h-5 mb-1" />
              <span className="text-xs font-medium">ÎÇ¥ Ï£ºÎ≥Ä</span>
            </button>
            
            <button
              onClick={() => {
                setLocationMode('domestic');
                setShowLocationPicker(true);
              }}
              className={`flex flex-col items-center p-3 rounded-lg transition-all ${
                locationMode === 'domestic' 
                  ? 'bg-gradient-to-r from-green-500 to-teal-500 text-white' 
                  : 'hover:bg-gray-50'
              }`}
            >
              <BuildingOfficeIcon className="w-5 h-5 mb-1" />
              <span className="text-xs font-medium">Íµ≠ÎÇ¥</span>
            </button>
            
            <button
              onClick={() => {
                setLocationMode('global');
                setShowLocationPicker(true);
              }}
              className={`flex flex-col items-center p-3 rounded-lg transition-all ${
                locationMode === 'global' 
                  ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white' 
                  : 'hover:bg-gray-50'
              }`}
            >
              <GlobeAltIcon className="w-5 h-5 mb-1" />
              <span className="text-xs font-medium">Ìï¥Ïô∏</span>
            </button>
          </div>
        </div>

        {/* ÏúÑÏπò ÏÑ†ÌÉù Ìå®ÎÑê */}
        <AnimatePresence>
          {showLocationPicker && locationMode === 'domestic' && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="mb-4 overflow-hidden"
            >
              <KoreaMap 
                onCitySelect={(city) => {
                  setSelectedLocation(city);
                  setShowLocationPicker(false);
                }}
              />
            </motion.div>
          )}

          {showLocationPicker && locationMode === 'global' && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="mb-4 overflow-hidden"
            >
              <WorldMap 
                onCitySelect={(city) => {
                  setSelectedLocation(city);
                  setShowLocationPicker(false);
                }}
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* ÏÑ†ÌÉùÎêú ÏúÑÏπò Ï†ïÎ≥¥ */}
        {selectedLocation && (
          <div className={`rounded-lg p-3 mb-4 text-white ${
            locationMode === 'domestic' 
              ? 'bg-gradient-to-r from-green-500 to-teal-600'
              : 'bg-gradient-to-r from-blue-500 to-purple-600'
          }`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-2xl">
                  {locationMode === 'domestic' 
                    ? (selectedLocation.icon || 'üèõÔ∏è')
                    : (selectedLocation.flag || 'üåç')}
                </span>
                <div>
                  <p className="font-semibold">{selectedLocation.name}</p>
                  <p className="text-xs opacity-90">
                    {selectedLocation.users}Î™ÖÏùò ÎØ∏ÏãùÍ∞Ä ‚Ä¢ {selectedLocation.restaurants || 0}Í∞ú ÎßõÏßë
                  </p>
                </div>
              </div>
              <button
                onClick={() => setSelectedLocation(null)}
                className="text-white/70 hover:text-white"
              >
                <XMarkIcon className="w-5 h-5" />
              </button>
            </div>
          </div>
        )}

        {/* Ïπ¥Îìú Ïä§ÌÉù */}
        <div className="relative h-[600px] overflow-visible">
          {/* Ïù¥Ï†Ñ Ïπ¥Îìú (ÏôºÏ™Ω) */}
          {currentIndex > 0 && (
            <motion.div
              className="absolute inset-0 cursor-pointer"
              style={{
                transform: 'scale(0.85) translateX(-85%)',
                opacity: 0.5,
                zIndex: 1,
              }}
              whileHover={{ 
                scale: 0.88,
                x: '-83%',
                opacity: 0.7,
                transition: { duration: 0.2 }
              }}
              onClick={goToPrevious}
            >
              <div className="bg-white rounded-2xl shadow-lg overflow-hidden h-full">
                <img
                  src={users[currentIndex - 1].profileImage}
                  alt={users[currentIndex - 1].username}
                  className="w-full h-2/3 object-cover"
                />
                <div className="p-4">
                  <h3 className="text-lg font-semibold text-gray-600">
                    {users[currentIndex - 1].username}
                  </h3>
                  <p className="text-sm text-gray-400">ÌÅ¥Î¶≠ÌïòÏó¨ Ïù¥Ï†ÑÏúºÎ°ú</p>
                </div>
              </div>
            </motion.div>
          )}
          
          {/* Îã§Ïùå Ïπ¥Îìú (Ïò§Î•∏Ï™Ω) */}
          {currentIndex < users.length - 1 && (
            <motion.div
              className="absolute inset-0 cursor-pointer"
              style={{
                transform: 'scale(0.85) translateX(85%)',
                opacity: 0.5,
                zIndex: 1,
              }}
              whileHover={{ 
                scale: 0.88,
                x: '83%',
                opacity: 0.7,
                transition: { duration: 0.2 }
              }}
              onClick={goToNext}
            >
              <div className="bg-white rounded-2xl shadow-lg overflow-hidden h-full">
                <img
                  src={users[currentIndex + 1].profileImage}
                  alt={users[currentIndex + 1].username}
                  className="w-full h-2/3 object-cover"
                />
                <div className="p-4">
                  <h3 className="text-lg font-semibold text-gray-600">
                    {users[currentIndex + 1].username}
                  </h3>
                  <p className="text-sm text-gray-400">ÌÅ¥Î¶≠ÌïòÏó¨ Îã§ÏùåÏúºÎ°ú</p>
                </div>
              </div>
            </motion.div>
          )}
          
          {/* Ï∂îÍ∞Ä Î∞∞Í≤Ω Ïπ¥Îìú (Îí§Ï™Ω) */}
          {currentIndex < users.length - 2 && (
            <div
              className="absolute inset-0"
              style={{
                transform: 'scale(0.75) translateY(-20px)',
                opacity: 0.2,
                zIndex: 0,
              }}
            >
              <div className="bg-white rounded-2xl shadow-lg overflow-hidden h-full">
                <div className="h-full bg-gray-200" />
              </div>
            </div>
          )}
          
          <AnimatePresence mode="wait">
            {hasMoreUsers && currentUser && (
              <motion.div
                key={currentUser.id}
                className="absolute inset-0"
                style={{ zIndex: 10 }}
                initial={{ scale: 0.95, opacity: 0, x: 0 }}
                animate={{ scale: 1, opacity: 1, x: 0 }}
                exit={{
                  scale: 0.85,
                  opacity: 0,
                  x: swipeDirection === 'left' ? -500 : swipeDirection === 'right' ? 500 : 0,
                  transition: { duration: 0.3 }
                }}
                drag="x"
                dragConstraints={{ left: 0, right: 0 }}
                dragElastic={0.8}
                onDragEnd={(e, { offset, velocity }: PanInfo) => {
                  const swipe = offset.x;
                  const swipeThreshold = 100;
                  const velocityThreshold = 500;

                  if (swipe > swipeThreshold || velocity.x > velocityThreshold) {
                    handleSwipe('right');
                  } else if (swipe < -swipeThreshold || velocity.x < -velocityThreshold) {
                    handleSwipe('left');
                  }
                }}
              >
                <div className="bg-white rounded-2xl shadow-xl overflow-hidden h-full cursor-grab active:cursor-grabbing">
                  {/* Ïù¥ÎØ∏ÏßÄ ÏòÅÏó≠ */}
                  <div className="relative h-2/3">
                    <img
                      src={currentUser.profileImage}
                      alt={currentUser.username}
                      className="w-full h-full object-cover"
                    />
                    
                    {/* Í∑∏ÎùºÎç∞Ïù¥ÏÖò Ïò§Î≤ÑÎ†àÏù¥ */}
                    <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
                    
                    {/* Î°úÏª¨ Î±ÉÏßÄ */}
                    {currentUser.isLocal && (
                      <div className="absolute top-4 left-4">
                        <div className="px-3 py-1 bg-green-500 text-white rounded-full font-semibold text-sm flex items-center gap-1">
                          <HomeIcon className="w-4 h-4" />
                          <span>Î°úÏª¨ Ï†ÑÎ¨∏Í∞Ä</span>
                        </div>
                      </div>
                    )}
                    
                    {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
                    <div className="absolute bottom-4 left-4 right-4 text-white">
                      <div className="flex items-center gap-2 mb-2">
                        <h2 className="text-2xl font-bold">{currentUser.username}</h2>
                        {currentUser.age && (
                          <span className="text-xl">{currentUser.age}</span>
                        )}
                        {currentUser.country && locationMode === 'global' && (
                          <span className="text-2xl ml-2">
                            {countryFlags[currentUser.country] || 'üåç'}
                          </span>
                        )}
                      </div>
                      
                      <div className="flex items-center gap-4 text-sm">
                        <div className="flex items-center gap-1">
                          <MapPinIcon className="w-4 h-4" />
                          <span>{currentUser.city || currentUser.location}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <SparklesIcon className="w-4 h-4" />
                          <span>{currentUser.matchRate}% Îß§Ïπ≠</span>
                        </div>
                      </div>
                      
                      {/* Ïñ∏Ïñ¥ */}
                      {currentUser.languages && (
                        <div className="flex gap-2 mt-2">
                          {currentUser.languages.map(lang => (
                            <span key={lang} className="px-2 py-1 bg-white/20 backdrop-blur-sm rounded text-xs">
                              {lang}
                            </span>
                          ))}
                        </div>
                      )}
                    </div>

                    {/* Îß§Ïπ≠Î•† Î±ÉÏßÄ */}
                    <div className="absolute top-4 right-4">
                      <div className={`px-3 py-1 rounded-full font-semibold text-sm ${
                        currentUser.matchRate >= 90 ? 'bg-purple-500 text-white' :
                        currentUser.matchRate >= 80 ? 'bg-blue-500 text-white' :
                        currentUser.matchRate >= 70 ? 'bg-green-500 text-white' :
                        'bg-gray-500 text-white'
                      }`}>
                        {currentUser.matchRate}% Îß§Ïπ≠
                      </div>
                    </div>
                  </div>

                  {/* ÏÉÅÏÑ∏ Ï†ïÎ≥¥ */}
                  <div className="p-4 h-1/3 overflow-y-auto">
                    <div className="mb-3">
                      <p className="text-sm text-purple-600 font-medium mb-1">
                        {currentUser.tasteProfile}
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {currentUser.tasteTags.map((tag, index) => (
                          <span
                            key={index}
                            className="px-2 py-1 bg-gray-100 rounded-full text-xs"
                          >
                            {tag}
                          </span>
                        ))}
                      </div>
                    </div>

                    {currentUser.bio && (
                      <p className="text-sm text-gray-600 mb-3">{currentUser.bio}</p>
                    )}

                    <div>
                      <h4 className="text-xs font-semibold text-gray-500 mb-2">
                        {currentUser.isLocal ? 'Ï∂îÏ≤ú Î°úÏª¨ ÎßõÏßë' : 'ÎåÄÌëú ÎßõÏßë'}
                      </h4>
                      <div className="space-y-1">
                        {currentUser.favoriteRestaurants.slice(0, 3).map((restaurant, index) => (
                          <div key={index} className="flex items-center gap-2 text-sm">
                            <span className="text-gray-800">{restaurant.name}</span>
                            <span className="text-gray-500">¬∑</span>
                            <span className="text-gray-500">{restaurant.category}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Ïπ¥ÎìúÍ∞Ä ÏóÜÏùÑ Îïå */}

          {!hasMoreUsers && selectedLocation && (
            <div className="flex flex-col items-center justify-center h-full">
              <div className="text-6xl mb-4">
                {locationMode === 'domestic' ? selectedLocation.icon : selectedLocation.flag}
              </div>
              <h3 className="text-xl font-semibold mb-2">
                {selectedLocation.name}Ïùò Ïπ¥ÎìúÎ•º Î™®Îëê ÌôïÏù∏ÌñàÏñ¥Ïöî!
              </h3>
              <p className="text-gray-600 text-center mb-6">
                Îã§Î•∏ ÎèÑÏãúÎ•º ÌÉêÌóòÌï¥Î≥¥ÏÑ∏Ïöî
              </p>
              <button
                onClick={() => {
                  setCurrentIndex(0);
                  setUsers(generateMockUsers(locationMode, selectedLocation));
                }}
                className="px-6 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors"
              >
                Îã§Ïãú Î≥¥Í∏∞
              </button>
            </div>
          )}

          {!hasMoreUsers && locationMode === 'nearby' && (
            <div className="flex flex-col items-center justify-center h-full">
              <div className="text-6xl mb-4">üòä</div>
              <h3 className="text-xl font-semibold mb-2">Îçî Ïù¥ÏÉÅ Ïπ¥ÎìúÍ∞Ä ÏóÜÏñ¥Ïöî!</h3>
              <p className="text-gray-600 text-center mb-6">
                ÏÉàÎ°úÏö¥ ÏÇ¨ÎûåÎì§Ïù¥ Í≥ß Ï∂îÍ∞ÄÎê† ÏòàÏ†ïÏù¥ÏóêÏöî
              </p>
              <button
                onClick={() => {
                  setCurrentIndex(0);
                  setUsers(generateMockUsers('nearby'));
                }}
                className="px-6 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors"
              >
                Îã§Ïãú Î≥¥Í∏∞
              </button>
            </div>
          )}
        </div>

        {/* Ïï°ÏÖò Î≤ÑÌäº */}
        {hasMoreUsers && (
          <div className="flex justify-center items-center gap-4 mt-6">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={handlePass}
              className="w-14 h-14 bg-white rounded-full shadow-lg flex items-center justify-center hover:bg-gray-50 transition-colors"
            >
              <XMarkIcon className="w-7 h-7 text-red-500" />
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={handleSuperLike}
              className="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center hover:bg-blue-50 transition-colors"
            >
              <SparklesIcon className="w-6 h-6 text-blue-500" />
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={handleLike}
              className="w-14 h-14 bg-white rounded-full shadow-lg flex items-center justify-center hover:bg-green-50 transition-colors"
            >
              <PlateIcon className="w-7 h-7 text-green-500" />
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => navigate(`/chat/${currentUser.id}`)}
              className="w-12 h-12 bg-white rounded-full shadow-lg flex items-center justify-center hover:bg-purple-50 transition-colors"
            >
              <ChatBubbleLeftIcon className="w-6 h-6 text-purple-500" />
            </motion.button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ExploreV2;