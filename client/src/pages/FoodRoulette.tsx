import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useMutation } from '@tanstack/react-query';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import { 
  ArrowPathIcon,
  MapPinIcon,
  ClockIcon,
  CurrencyDollarIcon,
  UserGroupIcon,
  FireIcon,
  SparklesIcon,
  HeartIcon,
  CheckCircleIcon
} from '@heroicons/react/24/outline';
import { useAuthStore } from '../store/authStore';

interface RouletteOption {
  id: string;
  name: string;
  emoji: string;
  category: string;
  description: string;
  tags: string[];
  color: string;
}

const FoodRoulette: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuthStore();
  const [spinning, setSpinning] = useState(false);
  const [selectedOption, setSelectedOption] = useState<RouletteOption | null>(null);
  const [rotation, setRotation] = useState(0);
  const [history, setHistory] = useState<RouletteOption[]>([]);
  const [preferences, setPreferences] = useState({
    location: '',
    budget: '',
    groupSize: '',
    mood: ''
  });
  const [recommendations, setRecommendations] = useState<any[]>([]);

  const foodOptions: RouletteOption[] = [
    { id: '1', name: 'ÌïúÏãù', emoji: 'üçö', category: 'ÌïúÏãù', description: 'Ïò§ÎäòÏùÄ Îì†Îì†Ìïú ÌïúÏãù Ïñ¥ÎïåÏöî?', tags: ['ÍπÄÏπòÏ∞åÍ∞ú', 'ÎêúÏû•Ï∞åÍ∞ú', 'ÎπÑÎπîÎ∞•', 'Î∂àÍ≥†Í∏∞'], color: '#FF6B6B' },
    { id: '2', name: 'Ï§ëÏãù', emoji: 'ü•ü', category: 'Ï§ëÏãù', description: 'ÏßúÏû•Î©¥? Ïß¨ÎΩï? ÌÉïÏàòÏú°?', tags: ['ÏßúÏû•Î©¥', 'Ïß¨ÎΩï', 'ÌÉïÏàòÏú°', 'ÎßàÌååÎëêÎ∂Ä'], color: '#4ECDC4' },
    { id: '3', name: 'ÏùºÏãù', emoji: 'üç£', category: 'ÏùºÏãù', description: 'Ïã†ÏÑ†Ìïú ÏùºÏãù ÏöîÎ¶¨ Ïñ¥Îñ†ÏÑ∏Ïöî?', tags: ['Ï¥àÎ∞•', 'ÎùºÎ©ò', 'ÎèàÏπ¥Ï∏†', 'Ïö∞Îèô'], color: '#45B7D1' },
    { id: '4', name: 'ÏñëÏãù', emoji: 'üçù', category: 'ÏñëÏãù', description: 'ÌååÏä§ÌÉÄÏôÄ ÌîºÏûêÏùò Ìñ•Ïó∞!', tags: ['ÌååÏä§ÌÉÄ', 'ÌîºÏûê', 'Ïä§ÌÖåÏù¥ÌÅ¨', 'Î¶¨Ï°∞Îòê'], color: '#96CEB4' },
    { id: '5', name: 'ÏπòÌÇ®', emoji: 'üçó', category: 'ÏπòÌÇ®', description: 'Î∞îÏÇ≠Î∞îÏÇ≠ ÏπòÌÇ® ÌÉÄÏûÑ!', tags: ['ÌõÑÎùºÏù¥Îìú', 'ÏñëÎÖê', 'Í∞ÑÏû•', 'ÌååÎã≠'], color: '#FFEAA7' },
    { id: '6', name: 'Î≤ÑÍ±∞', emoji: 'üçî', category: 'Ìå®Ïä§Ìä∏Ìë∏Îìú', description: 'ÏàòÏ†úÎ≤ÑÍ±∞ Ïñ¥ÎïåÏöî?', tags: ['ÏàòÏ†úÎ≤ÑÍ±∞', 'Í∞êÏûêÌäÄÍπÄ', 'ÏâêÏù¥ÌÅ¨'], color: '#DFE6E9' },
    { id: '7', name: 'Ïπ¥Ìéò', emoji: '‚òï', category: 'Ïπ¥Ìéò', description: 'Î∏åÎü∞ÏπòÎÇò ÎîîÏ†ÄÌä∏ ÌÉÄÏûÑ!', tags: ['Î∏åÎü∞Ïπò', 'ÏÉåÎìúÏúÑÏπò', 'ÏºÄÏù¥ÌÅ¨', 'Ïª§Ìîº'], color: '#FDCB6E' },
    { id: '8', name: 'Î∂ÑÏãù', emoji: 'üçú', category: 'Î∂ÑÏãù', description: 'Îñ°Î≥∂Ïù¥Ïóê ÏàúÎåÄ Ïñ¥ÎïåÏöî?', tags: ['Îñ°Î≥∂Ïù¥', 'ÍπÄÎ∞•', 'ÏàúÎåÄ', 'ÌäÄÍπÄ'], color: '#6C5CE7' },
    { id: '9', name: 'Í≥†Í∏∞', emoji: 'ü•©', category: 'Í≥†Í∏∞', description: 'Ïò§ÎäòÏùÄ Í≥†Í∏∞ ÌååÌã∞!', tags: ['ÏÇºÍ≤πÏÇ¥', 'Í∞àÎπÑ', 'Ïä§ÌÖåÏù¥ÌÅ¨', 'ÏñëÍº¨Ïπò'], color: '#A8E6CF' },
    { id: '10', name: 'Ìï¥ÏÇ∞Î¨º', emoji: 'ü¶ê', category: 'Ìï¥ÏÇ∞Î¨º', description: 'Ïã±Ïã±Ìïú Ìï¥ÏÇ∞Î¨º Ïñ¥ÎïåÏöî?', tags: ['Ìöå', 'Ï°∞Í∞úÍµ¨Ïù¥', 'Ìï¥Î¨ºÌÉï', 'ÏÉàÏö∞'], color: '#FFD3B6' },
    { id: '11', name: 'ÏïÑÏãúÏïà', emoji: 'üçõ', category: 'ÏïÑÏãúÏïà', description: 'ÎèôÎÇ®ÏïÑ ÏùåÏãù Ïñ¥ÎïåÏöî?', tags: ['ÏåÄÍµ≠Ïàò', 'ÌåüÌÉÄÏù¥', 'Î∂ÑÏßú', 'Îò†ÏñëÍøç'], color: '#FFAAA5' },
    { id: '12', name: 'Ïà†Ïßë', emoji: 'üç∫', category: 'Ï£ºÏ†ê', description: 'Ïò§ÎäòÏùÄ ÌïúÏûî Ïñ¥ÎïåÏöî?', tags: ['Ìè¨Ï∞®', 'Ìò∏ÌîÑ', 'Ïù¥ÏûêÏπ¥Ïïº', 'ÏôÄÏù∏Î∞î'], color: '#FF8B94' }
  ];

  const spin = () => {
    if (spinning) return;

    setSpinning(true);
    setSelectedOption(null);
    
    // Calculate random rotation
    const spins = 5 + Math.random() * 5; // 5-10 full rotations
    const randomIndex = Math.floor(Math.random() * foodOptions.length);
    const anglePerOption = 360 / foodOptions.length;
    const targetAngle = randomIndex * anglePerOption;
    const totalRotation = spins * 360 + targetAngle;
    
    setRotation(prev => prev + totalRotation);

    // Stop spinning after animation
    setTimeout(() => {
      setSpinning(false);
      const selected = foodOptions[randomIndex];
      setSelectedOption(selected);
      setHistory(prev => [selected, ...prev.slice(0, 4)]);
      
      // Save to game history and get recommendations
      if (user) {
        saveGameResult(selected);
      }
    }, 4000);
  };

  const saveGameResult = async (option: RouletteOption) => {
    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api/games/submit`,
        {
          gameType: 'food_roulette',
          answers: [{
            questionId: 'roulette_result',
            question: 'ÏùåÏãù Î£∞Î†õ Í≤∞Í≥º',
            answer: option.name,
            metadata: {
              category: option.category,
              tags: option.tags
            }
          }],
          location: {
            city: preferences.location || 'ÏÑúÏö∏',
            district: ''
          }
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`
          }
        }
      );

      if (response.data.recommendations) {
        setRecommendations(response.data.recommendations);
      }
    } catch (error) {
      console.error('Failed to save game result:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-purple-600 to-orange-600 bg-clip-text text-transparent">
            üé∞ Ïò§Îäò Î≠ê Î®πÏßÄ? ÏùåÏãù Î£∞Î†õ!
          </h1>
          <p className="text-gray-600">Í≤∞Ï†ïÏû•Ïï† Ìï¥Í≤∞ÏÇ¨! Î£∞Î†õÏùÑ ÎèåÎ†§ Ïò§ÎäòÏùò Î©îÎâ¥Î•º Ï†ïÌï¥Î≥¥ÏÑ∏Ïöî</p>
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Roulette Wheel */}
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="relative w-full max-w-md mx-auto">
              {/* Pointer */}
              <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-4 z-20">
                <div className="w-0 h-0 border-l-[20px] border-l-transparent border-r-[20px] border-r-transparent border-b-[40px] border-b-red-500"></div>
              </div>

              {/* Wheel */}
              <motion.div
                className="relative w-full aspect-square"
                animate={{ rotate: rotation }}
                transition={{ duration: 4, ease: [0.25, 0.1, 0.25, 1] }}
              >
                <svg viewBox="0 0 300 300" className="w-full h-full">
                  {foodOptions.map((option, index) => {
                    const anglePerSlice = 360 / foodOptions.length;
                    const startAngle = index * anglePerSlice - 90;
                    const endAngle = startAngle + anglePerSlice;
                    const startRad = (startAngle * Math.PI) / 180;
                    const endRad = (endAngle * Math.PI) / 180;
                    const largeArcFlag = anglePerSlice > 180 ? 1 : 0;
                    
                    const x1 = 150 + 140 * Math.cos(startRad);
                    const y1 = 150 + 140 * Math.sin(startRad);
                    const x2 = 150 + 140 * Math.cos(endRad);
                    const y2 = 150 + 140 * Math.sin(endRad);
                    
                    const textAngle = startAngle + anglePerSlice / 2;
                    const textRad = (textAngle * Math.PI) / 180;
                    const textX = 150 + 100 * Math.cos(textRad);
                    const textY = 150 + 100 * Math.sin(textRad);

                    return (
                      <g key={option.id}>
                        <path
                          d={`M 150 150 L ${x1} ${y1} A 140 140 0 ${largeArcFlag} 1 ${x2} ${y2} Z`}
                          fill={option.color}
                          stroke="white"
                          strokeWidth="2"
                        />
                        <text
                          x={textX}
                          y={textY}
                          fontSize="20"
                          textAnchor="middle"
                          dominantBaseline="middle"
                          transform={`rotate(${textAngle + 90}, ${textX}, ${textY})`}
                        >
                          {option.emoji}
                        </text>
                      </g>
                    );
                  })}
                </svg>
              </motion.div>

              {/* Center button */}
              <button
                onClick={spin}
                disabled={spinning}
                className={`absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-24 h-24 rounded-full text-white font-bold text-lg shadow-lg transition-all ${
                  spinning 
                    ? 'bg-gray-400 cursor-not-allowed' 
                    : 'bg-gradient-to-r from-purple-500 to-orange-500 hover:scale-110 active:scale-95'
                }`}
              >
                {spinning ? (
                  <ArrowPathIcon className="w-8 h-8 mx-auto animate-spin" />
                ) : (
                  'SPIN!'
                )}
              </button>
            </div>

            {/* Result */}
            <AnimatePresence>
              {selectedOption && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="mt-8 p-6 bg-gradient-to-r from-purple-100 to-orange-100 rounded-xl"
                >
                  <div className="text-center">
                    <div className="text-6xl mb-4">{selectedOption.emoji}</div>
                    <h3 className="text-2xl font-bold mb-2">{selectedOption.name}</h3>
                    <p className="text-gray-600 mb-4">{selectedOption.description}</p>
                    <div className="flex flex-wrap justify-center gap-2">
                      {selectedOption.tags.map(tag => (
                        <span key={tag} className="px-3 py-1 bg-white rounded-full text-sm">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          {/* Right Side - Preferences & Recommendations */}
          <div className="space-y-6">
            {/* Preferences */}
            <div className="bg-white rounded-2xl shadow-xl p-6">
              <h3 className="text-xl font-bold mb-4">üéØ ÏÑ†Ìò∏ Ï°∞Í±¥ ÏÑ§Ï†ï</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">
                    <MapPinIcon className="w-4 h-4 inline mr-1" />
                    ÏúÑÏπò
                  </label>
                  <select
                    value={preferences.location}
                    onChange={(e) => setPreferences({...preferences, location: e.target.value})}
                    className="w-full p-2 border rounded-lg"
                  >
                    <option value="">Ï†ÑÏ≤¥ ÏßÄÏó≠</option>
                    <option value="Í∞ïÎÇ®">Í∞ïÎÇ®</option>
                    <option value="ÌôçÎåÄ">ÌôçÎåÄ</option>
                    <option value="Ïù¥ÌÉúÏõê">Ïù¥ÌÉúÏõê</option>
                    <option value="ÏÑ±Ïàò">ÏÑ±Ïàò</option>
                    <option value="Ï¢ÖÎ°ú">Ï¢ÖÎ°ú</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    <CurrencyDollarIcon className="w-4 h-4 inline mr-1" />
                    ÏòàÏÇ∞
                  </label>
                  <select
                    value={preferences.budget}
                    onChange={(e) => setPreferences({...preferences, budget: e.target.value})}
                    className="w-full p-2 border rounded-lg"
                  >
                    <option value="">ÏÉÅÍ¥ÄÏóÜÏùå</option>
                    <option value="Ï†ÄÎ†¥">1ÎßåÏõê Ïù¥Ìïò</option>
                    <option value="Î≥¥ÌÜµ">1-3ÎßåÏõê</option>
                    <option value="Í≥†Í∏â">3ÎßåÏõê Ïù¥ÏÉÅ</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    <UserGroupIcon className="w-4 h-4 inline mr-1" />
                    Ïù∏Ïõê
                  </label>
                  <select
                    value={preferences.groupSize}
                    onChange={(e) => setPreferences({...preferences, groupSize: e.target.value})}
                    className="w-full p-2 border rounded-lg"
                  >
                    <option value="">ÏÉÅÍ¥ÄÏóÜÏùå</option>
                    <option value="ÌòºÎ∞•">ÌòºÏûê</option>
                    <option value="Îç∞Ïù¥Ìä∏">2Î™Ö</option>
                    <option value="ÏÜåÎ™®ÏûÑ">3-4Î™Ö</option>
                    <option value="Îã®Ï≤¥">5Î™Ö Ïù¥ÏÉÅ</option>
                  </select>
                </div>
              </div>
            </div>

            {/* History */}
            <div className="bg-white rounded-2xl shadow-xl p-6">
              <h3 className="text-xl font-bold mb-4">üìú ÏµúÍ∑º Í≤∞Í≥º</h3>
              {history.length > 0 ? (
                <div className="space-y-2">
                  {history.map((item, index) => (
                    <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                      <span className="text-2xl">{item.emoji}</span>
                      <span className="font-medium">{item.name}</span>
                      <span className="text-sm text-gray-500">#{index + 1}</span>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 text-center py-4">ÏïÑÏßÅ Î£∞Î†õÏùÑ ÎèåÎ¶¨ÏßÄ ÏïäÏïòÏñ¥Ïöî!</p>
              )}
            </div>

            {/* Recommendations */}
            {recommendations.length > 0 && (
              <div className="bg-white rounded-2xl shadow-xl p-6">
                <h3 className="text-xl font-bold mb-4">üçΩÔ∏è Ï∂îÏ≤ú ÎßõÏßë</h3>
                <div className="space-y-3">
                  {recommendations.slice(0, 3).map((restaurant, index) => (
                    <div key={index} className="p-4 border rounded-lg hover:bg-gray-50 cursor-pointer">
                      <div className="flex items-start justify-between">
                        <div>
                          <h4 className="font-semibold">{restaurant.name}</h4>
                          <p className="text-sm text-gray-600">{restaurant.address}</p>
                          <div className="flex items-center gap-2 mt-2">
                            <span className="text-sm bg-orange-100 text-orange-700 px-2 py-1 rounded">
                              {restaurant.category}
                            </span>
                            <span className="text-sm text-gray-500">
                              ‚≠ê {restaurant.averageRating || 4.5}
                            </span>
                          </div>
                        </div>
                        <CheckCircleIcon className="w-5 h-5 text-green-500" />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default FoodRoulette;