const mongoose = require('mongoose');
require('dotenv').config();

async function fixUserIndex() {
  try {
    // MongoDB Ïó∞Í≤∞
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB Ïó∞Í≤∞ ÏÑ±Í≥µ');

    // User Ïª¨Î†âÏÖò Í∞ÄÏ†∏Ïò§Í∏∞
    const db = mongoose.connection.db;
    const collection = db.collection('users');
    
    // Í∏∞Ï°¥ Ïù∏Îç±Ïä§ ÌôïÏù∏
    console.log('\nüìã ÌòÑÏû¨ Ïù∏Îç±Ïä§:');
    const indexes = await collection.listIndexes().toArray();
    indexes.forEach(idx => {
      console.log(`- ${idx.name}: ${JSON.stringify(idx.key)}`);
    });
    
    // email Ïù∏Îç±Ïä§ ÏÇ≠Ï†ú (Í∏∞Î≥∏ _id Ïù∏Îç±Ïä§ Ï†úÏô∏)
    try {
      await collection.dropIndex('email_1');
      console.log('\n‚úÖ email_1 Ïù∏Îç±Ïä§ ÏÇ≠Ï†ú ÏôÑÎ£å');
    } catch (error) {
      console.log('‚ö†Ô∏è email_1 Ïù∏Îç±Ïä§Í∞Ä ÏóÜÍ±∞ÎÇò Ïù¥ÎØ∏ ÏÇ≠Ï†úÎê®');
    }
    
    // sparse Ïù∏Îç±Ïä§Î°ú Ïû¨ÏÉùÏÑ± (partialFilterExpression ÏóÜÏù¥)
    await collection.createIndex(
      { email: 1 }, 
      { 
        unique: true, 
        sparse: true  // null Í∞í ÌóàÏö©
      }
    );
    console.log('‚úÖ email sparse Ïù∏Îç±Ïä§ ÏÉùÏÑ± ÏôÑÎ£å');
    
    // username Ïù∏Îç±Ïä§ÎèÑ ÌôïÏù∏
    try {
      await collection.createIndex(
        { username: 1 }, 
        { unique: true }
      );
      console.log('‚úÖ username Ïù∏Îç±Ïä§ ÌôïÏù∏/ÏÉùÏÑ± ÏôÑÎ£å');
    } catch (error) {
      console.log('‚ö†Ô∏è username Ïù∏Îç±Ïä§ Ïù¥ÎØ∏ Ï°¥Ïû¨');
    }
    
    // kakaoId, googleId Ïù∏Îç±Ïä§ÎèÑ sparseÎ°ú
    try {
      await collection.createIndex(
        { kakaoId: 1 }, 
        { sparse: true }
      );
      await collection.createIndex(
        { googleId: 1 }, 
        { sparse: true }
      );
      console.log('‚úÖ OAuth ID Ïù∏Îç±Ïä§ ÏÉùÏÑ± ÏôÑÎ£å');
    } catch (error) {
      console.log('‚ö†Ô∏è OAuth ID Ïù∏Îç±Ïä§ Ïù¥ÎØ∏ Ï°¥Ïû¨');
    }
    
    console.log('\nüìã ÏóÖÎç∞Ïù¥Ìä∏Îêú Ïù∏Îç±Ïä§:');
    const newIndexes = await collection.listIndexes().toArray();
    newIndexes.forEach(idx => {
      console.log(`- ${idx.name}: ${JSON.stringify(idx.key)}`);
      if (idx.sparse) console.log('  (sparse: true)');
      if (idx.partialFilterExpression) console.log(`  (partial: ${JSON.stringify(idx.partialFilterExpression)})`);
    });
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
    process.exit(1);
  }
}

fixUserIndex();